@model MyBlog.DataLayer.Post

@{
    ViewBag.Title = "ویرایش نوشته";
}

<div class="container">
    <h3 class="text-center mb-3 text-warning">ویرایش نوشته</h3>


    @using (Html.BeginForm("Edit", "Posts", FormMethod.Post, htmlAttributes: new { enctype = "multipart/form-data" , @class = "edit-post-form" }))
    {

        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.PostID)
        @Html.HiddenFor(model => model.ImageName)
        @Html.HiddenFor(model => model.PostDate)


        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.PostTitle, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.PostTitle, new { htmlAttributes = new { @class = "form-control d-block", @onkeydown = "return (event.keyCode!=13);" } })
            @Html.ValidationMessageFor(model => model.PostTitle, "", new { @class = "text-danger" })

        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.CategoryID , htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control d-block" })
            @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PostDescription, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.PostDescription, new { htmlAttributes = new { @class = "form-control d-block", @onkeydown = "return (event.keyCode!=13);" } })
            @Html.ValidationMessageFor(model => model.PostDescription, "", new { @class = "text-danger" })

        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.PostText, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.PostText, new { htmlAttributes = new { @class = "form-control d-block" } })
            @Html.ValidationMessageFor(model => model.PostText, "", new { @class = "text-danger" })

        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.UserID , htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("UserID", null, htmlAttributes: new { @class = "form-control d-block" })
            @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "text-danger" })

        </div>        <div class="form-group multi-search-filter" onclick="Array.from(this.children).find(n=>n.tagName==='INPUT').focus()">
            @Html.LabelFor(model => model.PostKeywords, htmlAttributes: new { @class = "control-label" })

            @foreach (var item in Model.PostKeywords.Split(','))

            {
                <div class="multi-search-item">
                    <span><input name="Keywords" class="d-none" value="@item" onkeydown = "return (event.keyCode!=13);" >@item</span>
                    <div class="fa fa-close" onclick="this.parentNode.remove()"></div>
                </div>
            }

            <input type="text" class="form-control d-block" onkeyup="multiSearchKeyup(this)" onkeydown = "return (event.keyCode!=13);" />
            @Html.ValidationMessageFor(model => model.PostKeywords, "", new { @class = "text-danger" })

        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.PostDate, htmlAttributes: new { @class = "control-label" })
            <p class="d-block form-control">@MyBlog.Utilities.PersianCalender.ToShamsi(Model.PostDate)</p>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ImageName, htmlAttributes: new { @class = "control-label d-block" })
            <img src="/Images/Posts/MainImages/OriginalSize/@Model.ImageName" alt="@Model.ImageAlt" style="max-height:300px;" id="imgPreview" />

        </div>

        <div class="form-group">
            <label for="uploadImage">
                آپلود تصویر
            </label>
            <div class="form-group">
                <div class="custom-file">
                    <input type="file" class="custom-file-input form-control" id="uploadImage" name="img_upload" value="" onkeydown = "return (event.keyCode!=13);" />
                    <label for="img" class="custom-file-label">تصویر را انتخاب کنید</label>
                </div>
                <small class="text-muted form-text">حداکثر اندازه باید 3مگابایت باشد</small>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ImageAlt, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.ImageAlt, new { htmlAttributes = new { @class = "form-control d-block", @onkeydown = "return (event.keyCode!=13);" } })
            @Html.ValidationMessageFor(model => model.ImageAlt, "", new { @class = "text-danger" })

        </div>




        <div class="form-group mt-3">
            <input type="submit" value="ویرایش" class="btn btn-warning" />
            <a href="@Url.Action("Index" , "Posts")" class="btn btn-secondary">انصراف</a>


        </div>

    }
</div>

    
@section scripts{
    <script>
        uploadImage.onchange = evt => {
            const [file] = uploadImage.files;
            if (file) {
                imgPreview.src = URL.createObjectURL(file);
            }
        };




        function multiSearchKeyup(inputElement) {
            if (event.keyCode === 13 && inputElement.value != "") {
                inputElement.parentNode
                    .insertBefore(createFilterItem(inputElement.value), inputElement)
                ;
                inputElement.value = "";
            }
        }
        function createFilterItem(text) {
            const item = document.createElement("div");
            item.setAttribute("class", "multi-search-item");
            const span = `<span><input name="Keywords" class="d-none" value="${text}" />${text}</span>`;
            const close = `<div class="fa fa-close" onclick="this.parentNode.remove()"></div>`;
            item.innerHTML += span + close;
            return item;
        }

    </script>


}
